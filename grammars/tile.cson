'scopeName': 'source.tile'
'name': 'Tile'
'fileTypes': ['tl', 'tile']

'patterns': [
    { # Line comments
      'begin': '\\/\\/'
      'end': '\n'
      'name': 'comment.line.double-slash.tile'
    },
    { # Block comments
      'begin': '\\/\\*'
      'end': '\\*\\/'
      'name': 'comment.line.double-slash.tile'
    },
    { # General Numbers
      'match': '(([0-9]+(\\.[0-9]+)?)|((\\.[0-9]+)))((e|E)-?([0-9]+))?'
      'name': 'constant.numeric.tile'
    },
    { # True False Types
      'match': '\\b(true|false|null|number|string|bool)\\b'
      'name': 'constant.language.tile'
    },
    { # Reserved Words
      'match': '\\b(isa|in|to)\\b'
      'name': 'keyword.operator.tile'
    },
    { # While For If Else
      'match': '\\b(while|for|if|else|return)\\b'
      'name': 'keyword.control.tile'
    },
    { # Import Statements (and the import after the statement until the ;)
      'match': '(\\bimport\\s)([^;\\n]*)'
      'captures':
        '1':
          'name': 'keyword.control.tile'
        '2':
          'name': 'comment.line.double-slash.tile'
      'name': 'keyword.control.tile'
    },
    { # Function Handles
      'match': '(@){1}(.*)\\b'
      'captures':
        '1':
          'name': 'entity.name.function.tag'
        '2':
          'name': 'entity.name.function.tag'
    },
    { # Functions
      'match': '(\\w+)\\s*\\('
      'captures':
        '1':
          'name': 'entity.name.function.tag'
    },
    { # Functions declarations (and the variables that are passed in)
      'match': '\\b(function)\\b'
      'name': 'keyword.control.tile'
    },
    { # Quotation sections (including escape charactors)
      'begin': '\'|\"'
      'beginCaptures':
        '0':
          'name': 'punctuation.definition.string.begin.tile'
      'end': '\'|\"'
      'endCaptures':
        '0':
          'name': 'punctuation.definition.string.end.tile'
      'name': 'string.quoted.single.tile'
      'patterns': [ # Match escape charactors inside quites only
        {
          'match': '\\\\.'
          'name': 'constant.character.escape.tile'
        }
      ]
    },
    { # Operators (+ - / * < > += -= *= /= | & as individuals)
      'match': '[+\\-=<>\\*\/]*=|[%<>!+\\-\\*\\^/\\|&]'
      'name': 'keyword.operator.tile'
    }
]
